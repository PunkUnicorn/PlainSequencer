using Autofac;
using FluentAssertions;
using Newtonsoft.Json;
using PactTests;
using PactTests_Shared;
using PlainSequencer.Logging;
using PlainSequencer.Options;
using PlainSequencer.Script;
using PlainSequencer.SequenceItemActions;
using PlainSequencer.SequenceItemSupport;
using System;
using System.Reflection;
using System.Threading;
using Xunit;
using Xunit.Abstractions;

namespace PactTests_OpenTests
{
    public class HttpSequencer_ISequenceItemAction
    {
        private readonly PortAllocationFixture mrPorty = new PortAllocationFixture(6000);
        private readonly ITestOutputHelper mrOutput;

        public Func<int> GetAvailablePort => mrPorty.GetAvailablePort;

        private ConsumeHttpSequencerPact ConsumeTestYamlPact { get; }
        private int Port { get; }

        private string ExecutableFilename = @".\DosAndLinuxBashScript.cmd";
        private string ExecutableExpectedResult = "EXPECTED RESULT";

        public HttpSequencer_ISequenceItemAction(ITestOutputHelper output)
        {
            Port = GetAvailablePort();
            var consumerName = $"{nameof(HttpSequencer_ISequenceItemAction)}Consumer";
            ConsumeTestYamlPact = new ConsumeHttpSequencerPact(consumerName, Port);
            ConsumeTestYamlPact.MockProviderService.ClearInteractions();
            mrOutput = output;
        }

        [Fact]
        public void SequenceItemActionRun_ExpectSuccess()
        {
            /* 𝓐𝓻𝓻𝓪𝓷𝓰𝓮... */
            var testSequenceItem = new SequenceItem
            {
                name = "test-cmd-script",
                run = new Run { exec = ExecutableFilename }
            };

            using var container = AutofacTestSession.ConfigureTestSession(new CommandLineOptions());
            using var scope = container?.BeginLifetimeScope();
            Assert.NotNull(scope); // "Test malfunction: can't create DI scope"

            var factory = scope.Resolve<ISequenceItemActionFactory>();
            var testParams = new SequenceItemCreateParams { Model = null, NextSequenceItems = new SequenceItem[] { }, SequenceItem = testSequenceItem };
            var factoryResult = factory.ResolveSequenceItemAction(testSequenceItem, testParams);
            var testSequenceItemAction = (ISequenceItemActionRun)factoryResult;

            /* 𝓐𝓬𝓽 */
            var resultModel = (string)(testSequenceItemAction as ISequenceItemActionRun).ActionAsync(new CancellationToken()).Result;


            /* 𝓐𝓼𝓼𝓮𝓻𝓽 */
            var result = (ISequenceItemResult)testSequenceItemAction;

            Assert.False(result.IsFail);

            Assert.Null(result.Exception);

            Assert.EndsWith(ExecutableExpectedResult, resultModel);

            var sequenceNotation = container.Resolve<ILogSequence>().GetSequenceDiagramNotation(MethodBase.GetCurrentMethod().Name);
            mrOutput.WriteLine(sequenceNotation);
        }

        [Theory]
        [InlineData(true, "")]
        [InlineData(false, null)]
        public void SequenceItemActionRun_ExpectFail(bool continueOnError, string expectedOutput)
        {
            /* 𝓐𝓻𝓻𝓪𝓷𝓰𝓮... */
            var testSequenceItem = new SequenceItem
            {
                name = "some-run-command",
                is_continue_on_failure = continueOnError,
                run = new Run { exec = "this is an invalid command" }
            };

            using var container = AutofacTestSession.ConfigureTestSession(new CommandLineOptions());
            using var scope = container?.BeginLifetimeScope();
            Assert.NotNull(scope); // "Test malfunction: can't create DI scope"

            var factory = scope.Resolve<ISequenceItemActionFactory>();
            var testParams = new SequenceItemCreateParams { Model = null, NextSequenceItems = new SequenceItem[] { }, SequenceItem = testSequenceItem };
            var factoryResult = factory.ResolveSequenceItemAction(testSequenceItem, testParams);
            var testSequenceItemAction = (ISequenceItemActionRun)factoryResult;


            /* 𝓐𝓬𝓽 */
            var resultModel = testSequenceItemAction.ActionAsync(new CancellationToken()).Result;


            /* 𝓐𝓼𝓼𝓮𝓻𝓽 */
            var result = (ISequenceItemResult)testSequenceItemAction;

            Assert.True(result.IsFail);

            Assert.NotNull(result.Exception);

            Assert.Null(resultModel);

            //if (continueOnError)
                Assert.Equal(expectedOutput, result.ActionResult);
            //else
              //  Assert.Null(result.ActionResult);


            /* 𝓢𝓮𝓺𝓾𝓮𝓷𝓬𝓮 𝓓𝓲𝓪𝓰𝓻𝓪𝓶 */

            var sequenceNotation = container.Resolve<ILogSequence>().GetSequenceDiagramNotation(MethodBase.GetCurrentMethod().Name);
            mrOutput.WriteLine(sequenceNotation);
        }

        [Fact]
        public void SequenceItemActionRun_ScribanSubstitute()
        {
            /* 𝓐𝓻𝓻𝓪𝓷𝓰𝓮... */
            var testSequenceItem = new SequenceItem
            {
                name = "test-cmd-script",
                run = new Run { exec = "{{model.param1}}" }
            };

            var testModel = new { param1 = ExecutableFilename };

            using var container = AutofacTestSession.ConfigureTestSession(new CommandLineOptions());
            using var scope = container?.BeginLifetimeScope();
            Assert.NotNull(scope); // "Test malfunction: can't create DI scope"

            var factory = scope.Resolve<ISequenceItemActionFactory>();
            var testParams = new SequenceItemCreateParams { Model = testModel, NextSequenceItems = new SequenceItem[] { }, SequenceItem = testSequenceItem };
            var factoryResult = factory.ResolveSequenceItemAction(testSequenceItem, testParams);
            var testSequenceItemAction = (ISequenceItemActionRun)factoryResult;


            /* 𝓐𝓬𝓽 */
            var resultModel = (string)testSequenceItemAction.ActionAsync(new CancellationToken()).Result;


            /* 𝓐𝓼𝓼𝓮𝓻𝓽 */
            var result = (ISequenceItemResult)testSequenceItemAction;

            Assert.False(result.IsFail);

            Assert.Null(result.Exception);

            Assert.EndsWith(ExecutableExpectedResult, resultModel);

            var sequenceNotation = container.Resolve<ILogSequence>().GetSequenceDiagramNotation(MethodBase.GetCurrentMethod().Name);
            mrOutput.WriteLine(sequenceNotation);
        }

        [Fact]
        public void SequenceItemActionCheck_ExpectSuccess()
        {
            /* 𝓐𝓻𝓻𝓪𝓷𝓰𝓮... */
            var testSequenceItem = new SequenceItem
            {
                name = "check-item",
                check = new Check { pass_template = "true" }
            };

            var testModel = new { SomeData = "this is some data" };

            using var container = AutofacTestSession.ConfigureTestSession(new CommandLineOptions());
            using var scope = container?.BeginLifetimeScope();

            Assert.NotNull(scope); // "Test malfunction: can't create DI scope"

            var factory = scope.Resolve<ISequenceItemActionFactory>();
            var testParams = new SequenceItemCreateParams { Model = testModel, NextSequenceItems = new SequenceItem[] { }, SequenceItem = testSequenceItem };
            var factoryResult = factory.ResolveSequenceItemAction(testSequenceItem, testParams);
            var testSequenceItemAction = (ISequenceItemActionRun)factoryResult;


            /* 𝓐𝓬𝓽 */
            var actual = testSequenceItemAction.ActionAsync(new CancellationToken()).Result;


            /* 𝓐𝓼𝓼𝓮𝓻𝓽 */
            var resultModel = (ISequenceItemResult)testSequenceItemAction;

            Assert.False(resultModel.IsFail);

            Assert.Null(resultModel.Exception);

            Assert.Equal(JsonConvert.SerializeObject(testModel), JsonConvert.SerializeObject(actual));

            var sequenceNotation = container.Resolve<ILogSequence>().GetSequenceDiagramNotation(MethodBase.GetCurrentMethod().Name);
            mrOutput.WriteLine(sequenceNotation);
        }

        [Theory]
        [InlineData(true, "{\"SomeData\":\"this is some data\"}")]
        [InlineData(false, null)]
        public void SequenceItemActionCheck_ExpectFail(bool continueOnError, string expectedOutput)
        {
            /* 𝓐𝓻𝓻𝓪𝓷𝓰𝓮... */
            const string commandName = "check-item-expect-fail";

            var testSequenceItem = new SequenceItem
            {
                name = commandName,
                is_continue_on_failure = continueOnError,
                check = new Check { pass_template = "false" }
            };

            var testModel = new { SomeData = "this is some data" };

            using var container = AutofacTestSession.ConfigureTestSession(new CommandLineOptions());
            using var scope = container?.BeginLifetimeScope();
            Assert.NotNull(scope); // "Test malfunction: can't create DI scope"

            var factory = scope.Resolve<ISequenceItemActionFactory>();
            var testParams = new SequenceItemCreateParams { Model = testModel, NextSequenceItems = new SequenceItem[] { }, SequenceItem = testSequenceItem };
            var factoryResult = factory.ResolveSequenceItemAction(testSequenceItem, testParams);
            var testSequenceItemAction = (ISequenceItemActionRun)factoryResult;


            /* 𝓐𝓬𝓽 */
            var resultModel = testSequenceItemAction.ActionAsync(new CancellationToken()).Result;


            /* 𝓐𝓼𝓼𝓮𝓻𝓽 */
            var result = (ISequenceItemResult)testSequenceItemAction;

            Assert.True(result.IsFail);

            Assert.NotNull(result.Exception);

            Assert.Contains(commandName, result.Exception.Message);

            if (continueOnError)
            {
                result.ActionResult.Should().NotBeNull();
                Assert.Equal(expectedOutput, JsonConvert.SerializeObject(result.ActionResult));
            }
            else
                Assert.Null(result.ActionResult);


            /* 𝓢𝓮𝓺𝓾𝓮𝓷𝓬𝓮 𝓓𝓲𝓪𝓰𝓻𝓪𝓶 */

            var sequenceNotation = container.Resolve<ILogSequence>().GetSequenceDiagramNotation(MethodBase.GetCurrentMethod().Name);
            mrOutput.WriteLine(sequenceNotation);
        }

        [Fact]
        public void SequenceItemActionCheck_ScribanSubstitute_CheckPasses()
        {
            /* 𝓐𝓻𝓻𝓪𝓷𝓰𝓮... */
            var testSequenceItem = new SequenceItem
            {
                name = "test-check-item-sriban-expect-pass",
                check = new Check { pass_template = "{{if model.someData == 'the correct data'}}true{{else}}false{{end}}", fail_info_template = "Check failed with value: {{model.someData}}" }
            };

            var testModel = new { someData = "the correct data" };

            using var container = AutofacTestSession.ConfigureTestSession(new CommandLineOptions());
            using var scope = container?.BeginLifetimeScope();

            Assert.NotNull(scope); // "Test malfunction: can't create DI scope"

            var factory = scope.Resolve<ISequenceItemActionFactory>();
            var testParams = new SequenceItemCreateParams { Model = testModel, NextSequenceItems = new SequenceItem[] { }, SequenceItem = testSequenceItem };
            var factoryResult = factory.ResolveSequenceItemAction(testSequenceItem, testParams);
            var testSequenceItemAction = (ISequenceItemActionRun)factoryResult;


            /* 𝓐𝓬𝓽 */
            var resultModel = testSequenceItemAction.ActionAsync(new CancellationToken()).Result;


            /* 𝓐𝓼𝓼𝓮𝓻𝓽 */
            var result = (ISequenceItemResult)testSequenceItemAction;

            Assert.False(result.IsFail);

            Assert.Null(result.Exception);

            Assert.Equal(JsonConvert.SerializeObject(testModel), JsonConvert.SerializeObject(resultModel));


            var sequenceNotation = container.Resolve<ILogSequence>().GetSequenceDiagramNotation(MethodBase.GetCurrentMethod().Name);
            mrOutput.WriteLine(sequenceNotation);
        }

        [Theory]
        [InlineData(true, "{\"SomeData\":\"this is NOT the correct data\"}")]
        [InlineData(false, null)]
        public void SequenceItemActionCheck_ScribanSubstitute_CheckFails(bool continueOnError, string expectedOutput)
        {
            /* 𝓐𝓻𝓻𝓪𝓷𝓰𝓮... */
            const string commandName = "some-check-sriban-expect-fail";
            var testSequenceItem = new SequenceItem
            {
                name = commandName,
                is_continue_on_failure = continueOnError,
                check = new Check { pass_template = "{{if model.someData == 'the correct data'}}true{{else}}false{{end}}", fail_info_template = "Check failed with value: {{model.someData}}" }
            };

            var testModel = new { someData = "this is NOT the correct data" };

            using var container = AutofacTestSession.ConfigureTestSession(new CommandLineOptions());
            using var scope = container?.BeginLifetimeScope();

            Assert.NotNull(scope); // "Test malfunction: can't create DI scope"

            var factory = scope.Resolve<ISequenceItemActionFactory>();
            var testParams = new SequenceItemCreateParams { Model = testModel, NextSequenceItems = new SequenceItem[] { }, SequenceItem = testSequenceItem };
            var factoryResult = factory.ResolveSequenceItemAction(testSequenceItem, testParams);
            var testSequenceItemAction = (ISequenceItemActionRun)factoryResult;


            /* 𝓐𝓬𝓽 */
            var resultModel = testSequenceItemAction.ActionAsync(new CancellationToken()).Result;


            /* 𝓐𝓼𝓼𝓮𝓻𝓽 */
            var result = (ISequenceItemResult)testSequenceItemAction;

            Assert.True(result.IsFail);

            Assert.NotNull(result.Exception);

            Assert.Contains(commandName, result.Exception.Message);

            Assert.Equal(JsonConvert.SerializeObject(testModel), JsonConvert.SerializeObject(resultModel));

            if (continueOnError)
            {
                result.ActionResult.Should().NotBeNull();
                JsonConvert.SerializeObject(result.ActionResult).Should().BeEquivalentTo(expectedOutput);
            }
            else
                result.ActionResult.Should().BeNull();

            /* 𝓢𝓮𝓺𝓾𝓮𝓷𝓬𝓮 𝓓𝓲𝓪𝓰𝓻𝓪𝓶 */

            var sequenceNotation = container.Resolve<ILogSequence>().GetSequenceDiagramNotation(MethodBase.GetCurrentMethod().Name);
            mrOutput.WriteLine(sequenceNotation);
        }

        [Fact]
        public void SequenceItemActionCheck_ScribanSubstitute_InvalidScriban()
        {
            /* 𝓐𝓻𝓻𝓪𝓷𝓰𝓮... */
            var testSequenceItem = new SequenceItem
            {
                name = "some-check-sriban-expect-invalid-template",
                check = new Check { pass_template = "{{this is not valid scriban!}}true{{else}}false{{end}}" }
            };

            var testModel = new { someData = "some data" };

            using var container = AutofacTestSession.ConfigureTestSession(new CommandLineOptions());
            using var scope = container?.BeginLifetimeScope();

            Assert.NotNull(scope); // "Test malfunction: can't create DI scope"

            var factory = scope.Resolve<ISequenceItemActionFactory>();
            var testParams = new SequenceItemCreateParams { Model = testModel, NextSequenceItems = new SequenceItem[] { }, SequenceItem = testSequenceItem };
            var factoryResult = factory.ResolveSequenceItemAction(testSequenceItem, testParams);
            var testSequenceItemAction = (ISequenceItemActionRun)factoryResult;

            /* 𝓐𝓬𝓽 */
            var resultModel = testSequenceItemAction.ActionAsync(new CancellationToken()).Result;


            /* 𝓐𝓼𝓼𝓮𝓻𝓽 */
            var result = (ISequenceItemResult)testSequenceItemAction;

            Assert.True(result.IsFail);

            Assert.NotNull(result.Exception);

            Assert.Null(resultModel);


            var sequenceNotation = container.Resolve<ILogSequence>().GetSequenceDiagramNotation(MethodBase.GetCurrentMethod().Name);
            mrOutput.WriteLine(sequenceNotation);
        }
    }
}
